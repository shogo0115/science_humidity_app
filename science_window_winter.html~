<html lang="ja"><head>
    <meta charset="UTF-8">
    <title>湿度と結露を学ぼう！</title>
    <style>
     body {
    font-family: Arial, sans-serif;
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
    background-color: #f0f0f0;
}

.top-buttons {
    display: flex;
    justify-content: flex-start; /* 左寄せに配置 */
    gap: 20px; /* ボタン間の隙間 */
    margin-bottom: 20px; /* ボタンとコンテンツの間隔 */
}

.nav-button {
    background-color: #007bff;
    color: white;
    border: none;
    padding: 10px 20px;
    font-size: 16px;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.nav-button:hover {
    background-color: #0056b3;
}

.controls {
    display: flex;
    justify-content: space-between; /* 均等に配置 */
    align-items: flex-start; /* 上揃え */
    gap: 20px; /* 各項目の間隔 */
}

.control {
    background-color: white;
    padding: 10px;
    border-radius: 5px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    text-align: center;
    width: 160px; /* 外枠の幅を設定 */
    height: 250px; /* 外枠の高さを設定 */
    display: flex; /* 中身を縦方向に揃えるため */
    flex-direction: column; /* 縦並びにする */
    justify-content: center; /* 縦方向の中央揃え */
    align-items: center; /* 横方向の中央揃え */
    font-size: 1.2em; /* フォントサイズを大きく */
}




.button {
    margin-top: 5px; /* ボタンとテキストの間隔 */
}

#cupTempLabel {
    font-size: 18px; /* 変更したいフォントサイズを設定 */
    font-weight: bold; /* 必要に応じて文字を太くする */
}

#cupTempDisplay {
    font-size: 24px; /* 必要なフォントサイズ */
    font-weight: bold; /* 必要に応じて文字を太くする */
    color: #333; /* 必要に応じて文字色を変更 */
}

#remote-control {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 10px;
}

.button {
    background-color: #007bff;
    color: white;
    border: none;
    padding: 10px 20px;
    font-size: 16px;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.button:disabled {
    background-color: #d3d3d3;
    cursor: not-allowed;
}

.button:hover:enabled {
    background-color: #0056b3;
}

.temperature-display {
    font-size: 24px;
    font-weight: bold;
    color: #333;
}

#cup-container {
    display: flex;
    justify-content: center;
    align-items: flex-end;
    gap: 20px;
    position: relative;
}

#cup-image {
    width: 350px;
    height: 350px;
    object-fit: cover; /* 画像を縦横比を維持して枠内に収める */
    display: block; /* ブロック要素にして中央配置 */
    margin: 0 auto; /* 中央配置 */
}

#condensation {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 0;
    background-color: rgba(100, 149, 237, 0.7);
    transition: height 0.5s ease;
}

#condensationTextContainer {
    display: flex;
    flex-direction: column;
    align-items: center; /* ボタンとテキストを中央揃え */
    gap: 10px; /* ボタンとテキスト間の間隔 */
    width: 150px; /* 横幅を固定 */
    margin-top: 20px; /* 上方向の余白を調整 */
    margin-left: 0px; /* 左方向に移動させる */
}


#condensationText {
    font-weight: bold;
    color: gray;
    font-size: 24px; 
}

#humidityText {
        font-weight: bold;
        color: black; /* 必要なら色を調整 */
        font-size: 20px; /* 湿度表示のフォントサイズを設定 */
}

#graph-container {
    width: 500px;
    height: 300px;
}

/* 凡例デザイン */
#legend {
    margin-top: 20px;
    display: flex;
    flex-direction: column; /* 縦並び */
    align-items: flex-start; /* 左揃え */
    gap: 10px; /* 各説明間の余白を設定 */
}

.legend-item {
    display: flex;
    align-items: center; /* 色とテキストを中央揃え */
    gap: 5px; /* 色とテキストの間隔 */
}

.legend-color {
    width: 20px;
    height: 20px;
    border: 1px solid black; /* 色の周囲に枠を追加 */
}

/* 横並びに配置するためのコンテナ設定 */
#layout-container {
    display: flex; /* 横並びに配置 */
    justify-content: space-between; /* 均等に配置 */
    align-items: flex-start; /* 上揃え */
    gap: 20px; /* ボタンと写真の間隔を広げる */
    margin-top: 30px; /* 上側の余白を追加 */
}


/* コップ画像と温度説明画像を縦並びに配置 */
#photos-container {
    display: flex;
    flex-direction: column; /* 縦並び */
    align-items: center; /* 中央揃え */
    gap: 10px; /* 各画像の間隔 */
}

/* グラフコンテナのデザイン */
#graph-container {
    flex: 1; /* 横幅を調整して他の要素とバランスを取る */
    display: flex;
    flex-direction: column; /* 縦並び */
    align-items: center; /* 中央揃え */
    gap: 10px; /* グラフと凡例の間隔 */
}

#description-container {
    margin-top: 20px; /* 全体の余白 */
    margin-bottom: 20px;
    text-align: center;
}

#condensation-explanation {
    font-size: 20px;
    line-height: 1.6;
    margin-bottom: 20px; /* 下部の余白 */
    color: #333;
}

#experiment-controls {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 20px; /* テキストとボタンの間隔 */
}

#description-text {
    font-size: 24px;
    line-height: 1.6;
    margin: 0; /* 不要な余白を除去 */
    color: #333;
    text-align: left; /* テキストを左揃え */
}

#startExperimentButton {
    padding: 10px 20px;
    font-size: 16px;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

#startExperimentButton:hover {
    background-color: #0056b3;
}

#startExperimentButton.running {
    background-color: #ff0000; /* 赤色 */
    color: white; /* テキスト色 */
}




   </style>
</head>
<body>
  <div class="top-buttons">
      <button class="nav-button" id="homeButton">ホームに戻る</button>
      <button class="nav-button" id="observeButton">違うものを調べる</button>
  </div>

  <div id="description-container">
    <!-- 結露に関する説明文 -->
    <div id="condensation-explanation">
      室内の暖かい空気が冷たい窓に触れ、水蒸気量が飽和水蒸気量を超えることで、<br>水滴が発生します。
      そのため水滴は窓の内側に発生します。
    </div>

    <!-- 室温と実験内容に関する説明文とボタン -->
    <div id="experiment-controls">
        <p id="description-text">
           ＜実験内容＞<br> 室温 <span id="roomTempValue">20</span>℃ 、空間内の水分量 <span id="moistureValue">5.0</span>g/m³ の部屋があり<br>
            外の気温が <span id="cupTempValue">20</span>℃ の時の窓の様子を観察する。
        </p>
        <button id="startExperimentButton" class="button">実験を開始する</button>
    </div>
  </div>
  
  <div class="controls">
    <div class="control" id="remote-control">
        <label>   室温 (窓のまわりの温度)  : <span id="roomTempDisplay">20</span>°C</label>
        <button class="button" id="temp-up">＋</button>
        <span>(1℃上がる)</span>
        <button class="button" id="temp-down" disabled="">－</button>
        <span>(1℃下がる)</span>
    </div>

    <div class="control">
        <label>空間内の水分量: <span id="moistureDisplay">5.0</span>g/m³</label>
        <button class="button" id="humidifyButton">加湿する</button>
        <span>(1g/m³増える)</span>
        <button class="button" id="dehumidifyButton" disabled="">除湿する</button>
        <span>(1g/m³減る)</span>
    </div>
    
    <div class="control" id="cup-control">
      <div class="temperature-display">
        <span id="cupTempLabel">外の気温</span>: <span id="cupTempDisplay">20</span>°C
    </div>
    <button class="button" id="cup-temp-up" disabled="">＋</button>
    <br>（1℃上がる）
    <button class="button" id="cup-temp-down">－</button>
    <br>（1℃下がる）
</div>
</div>



  <div id="cup-container">
      <div id="layout-container">
          <div id="photos-container">
              <img id="cup-image" src="glass-20-0.png" alt="コップの画像">
              <img id="temperature-image" src="winter-sky.png" alt="水の温度説明画像" style="width: 300px; height: auto; display: block; margin: 0 auto;">

          </div>
          <div id="condensationTextContainer">
            <div id="condensationText" style="color: gray;">結露が発生！</div>
	    <div id="humidityText">湿度: <span id="humidityDisplay">28.9</span>%</div>
          </div>
          <div id="graph-container">
              <canvas id="graphCanvas" width="550" height="350"></canvas>
              <div id="legend">
                  <div class="legend-item">
                      <div class="legend-color" style="background-color: blue;"></div>
                      <span>水蒸気量</span>
                  </div>
                  <div class="legend-item">
                      <div class="legend-color" style="background-color: green;"></div>
                      <span>水滴の量</span>
                  </div>
                  <div class="legend-item">
                      <div class="legend-color" style="background-color: orange;"></div>
                      <span>まだ空気中に含むことができる水蒸気量</span>
                  </div>
              </div>
          </div>
      </div>
  </div>



<script>
    // ボタンのイベントリスナー
document.getElementById('homeButton').addEventListener('click', () => {
    window.location.href = 'science_home.html'; // ホームページに遷移
});

document.getElementById('observeButton').addEventListener('click', () => {
    window.location.href = 'science_house.html'; // 違うものを観察ページに遷移
});

      
        const roomTempDisplay = document.getElementById('roomTempDisplay');
        const moistureDisplay = document.getElementById('moistureDisplay');
        const moistureSlider = document.getElementById('moisture');
        const cupTempUpButton = document.getElementById('cup-temp-up');
        const cupTempDownButton = document.getElementById('cup-temp-down');
        const addIceButton = document.getElementById('addIceButton');
        const humidifyButton = document.getElementById('humidifyButton');
        const condensation = document.getElementById('condensation');
        const condensationText = document.getElementById('condensationText');
        const graphCanvas = document.getElementById('graphCanvas');
        const graphContext = graphCanvas.getContext('2d');
        const tempUpButton = document.getElementById('temp-up');
        const tempDownButton = document.getElementById('temp-down');

        // 室温、空間内水分量、コップ温度に関連するボタンを一括管理
const controlButtons = [
    document.getElementById('temp-up'),
    document.getElementById('temp-down'),
    document.getElementById('humidifyButton'),
    document.getElementById('dehumidifyButton'),
    document.getElementById('cup-temp-up'),
    document.getElementById('cup-temp-down'),
];

  
      const originX = 120; // 左側の余白を増加
      const originY = graphCanvas.height - 50; // 下側の余白を増加
      const unitX = (graphCanvas.width - 150) / 35; // 横幅に合わせてスケール調整
      const unitY = (graphCanvas.height - 100) / 40; // 高さに合わせてスケール調整

        // 初期設定
        let roomTemp = 20; // 室温
        let moisture = 5;  // 空間内の水分量
        let cupTemp = 14;  // コップの温度

        let initialRoomTemp; // 実験開始前の室温
        let initialMoisture; // 実験開始前の空間内の水蒸気量
        let initialCupTemp;  // 実験開始前のコップの温度

        let isExperimentRunning = false; // 実験の状態を管理するフラグ
        let coolingInterval; // 実験用のInterval ID

        // 室温の増減ボタンイベント
        tempUpButton.addEventListener('click', () => {
            if (roomTemp < 26) {
                roomTemp++;
		updateRoomTemp();
                updateCondensation();
            }
        });

        tempDownButton.addEventListener('click', () => {
            if (roomTemp > 14) {
                roomTemp--;
		updateRoomTemp();
                updateCondensation();
            }
        });

        // 加湿するボタンのクリックイベント
humidifyButton.addEventListener('click', () => {
    if (moisture < 40) {
        moisture = Math.min(40, moisture + 1); // 40g/m³を超えないようにする
        updateMoisture();
    }
});


// 除湿するボタンのクリックイベント
document.getElementById('dehumidifyButton').addEventListener('click', () => {
    if (moisture > 5) {
        moisture = Math.max(5, moisture - 1); // 0g/m³を下回らないようにする
        updateMoisture();
    }
});

cupTempUpButton.addEventListener('click', () => {
    if (cupTemp < 35) {
        cupTemp++;
        updateCupTemp();
    }
});

cupTempDownButton.addEventListener('click', () => {
    if (cupTemp > 0) {
        cupTemp--;
        updateCupTemp();
    }
});



document.getElementById('startExperimentButton').addEventListener('click', () => {
    const startButton = document.getElementById('startExperimentButton'); // ボタン要素
    const cupTempLabel = document.getElementById('cupTempLabel'); // ラベル要素

    if (!isExperimentRunning) {
        // 実験を開始する
        isExperimentRunning = true;
        startButton.textContent = "実験をやめる"; // ボタンのテキスト変更
        startButton.classList.add('running'); // ボタンのスタイル変更


        // 現在の状態を保存
        initialRoomTemp = roomTemp;
        initialMoisture = moisture;
        initialCupTemp = cupTemp;

        // 室温にコップの温度を設定
       // cupTemp = roomTemp;
       // updateCupTemp();

        // ボタンを無効化
        toggleButtonsState(true);

	updateDescription();

        // 温度変化を開始
        startCoolingExperiment();
    }
    else {
        // 実験をやめる
        isExperimentRunning = false;
        startButton.textContent = "実験を開始する"; // ボタンのテキスト変更
        startButton.classList.remove('running'); // ボタンのスタイルリセット

        // ボタンを有効化
        toggleButtonsState(false);

        // 温度変化を停止
        clearInterval(coolingInterval);

        // 保存した状態に戻す
        roomTemp = initialRoomTemp;
        moisture = initialMoisture;
        cupTemp = initialCupTemp;

        // 状態を更新
        updateRoomTemp();
        updateMoisture();
        updateCupTemp();
        updateDescription();
    }
});



// ボタンの有効/無効を切り替える関数
function toggleButtonsState(disable) {
    document.getElementById('temp-up').disabled = disable;
    document.getElementById('temp-down').disabled = disable;
    document.getElementById('humidifyButton').disabled = disable;
    document.getElementById('dehumidifyButton').disabled = disable;
    document.getElementById('cup-temp-up').disabled = disable;
    document.getElementById('cup-temp-down').disabled = disable;
}

function updateRoomTemp() {
    roomTempDisplay.textContent = roomTemp;
    tempUpButton.disabled = roomTemp >= 26; // 室温の上限チェック (変更後の上限26℃)
    tempDownButton.disabled = roomTemp <= 14; // 室温の下限チェック (変更後の下限14℃)
    updateCondensation(); // 結露の状態を更新
    updateDescription(); // 説明テキストを更新
}

function updateCupTemp() {
    cupTempDisplay.textContent = cupTemp;
    if (!isExperimentRunning) {
        cupTempUpButton.disabled = cupTemp >= 14; // コップ温度の上限チェック (変更後の上限26℃)
        cupTempDownButton.disabled = cupTemp <= 0; // コップ温度の下限チェック (変更後の下限14℃)
    }
    updateCondensation(); // 結露の状態を更新
    updateDescription(); // 説明テキストを更新
}


function updateCupImage() {
    // 温度と水滴の量を2の倍数に丸める
    const roundedTemp = Math.ceil(cupTemp / 2) * 2; // 温度を2の倍数に丸める
    const waterExcess = Math.max(0, moisture - a(roomTemp)); // 水滴の量を計算
    const roundedWater = Math.min(Math.ceil(waterExcess / 5) * 5, 35); // 水滴量を5の倍数に丸める（最大35）

    // 画像名を決定
    const imageName = `window-${roundedTemp}-${roundedWater}.png`;

    // 画像を更新
    const cupImage = document.getElementById('cup-image');
    cupImage.src = imageName;
}


// 湿度を計算する関数
function calculateHumidity() {
    const saturationVapor = a(roomTemp); // 室温での飽和水蒸気量を取得
    const humidity = (moisture / saturationVapor) * 100; // 湿度を計算
    return Math.min(100, Math.max(0, humidity.toFixed(1))); // 0%～100%の範囲に制限し、小数点1位に丸める
}

// 湿度を更新する関数
function updateHumidity() {
    const humidityDisplay = document.getElementById('humidityDisplay');
    const calculatedHumidity = calculateHumidity(); // 湿度を計算
    humidityDisplay.textContent = `${calculatedHumidity}`; // 湿度を表示
}

// 湿度の表示を更新するタイミングで呼び出す
function updateCondensation() {
    roomTempDisplay.textContent = roomTemp;

    const saturationVapor = a(roomTemp);
    const waterExcess = moisture - saturationVapor;
    const isCondensed = waterExcess >= 0.1;

    if (isCondensed) {
        condensationText.textContent = '結露が発生！';
        condensationText.style.color = 'red';
    } else {
        condensationText.textContent = '結露は発生　していない';
        condensationText.style.color = 'gray';
    }


    // 湿度を更新
    updateHumidity();
    // グラフを更新
    plotPointAndBar(graphContext, roomTemp, moisture);
    // 画像を更新
    updateCupImage();
}

// 初期状態でも湿度を更新
updateHumidity();

    let targetTemp = null; // 目標温度をグローバル変数として定義

function updateDescription() {
    const roomTempValue = document.getElementById('roomTempValue');
    const cupTempValue = document.getElementById('cupTempValue');
    const moistureValue = document.getElementById('moistureValue');

    // 実験を開始した時点の室温を保持するための静的変数
    if (typeof staticRoomTemp === "undefined") {
        staticRoomTemp = null; // 初期化
    }

    // 室温の値を固定
    if (isExperimentRunning) {
        if (staticRoomTemp === null) {
            staticRoomTemp = roomTemp; // 実験開始時に室温を固定
        }
        roomTempValue.textContent = staticRoomTemp; // 固定された室温を表示
    } else {
        staticRoomTemp = null; // 実験終了後にリセット
        roomTempValue.textContent = roomTemp; // 室温を常に更新
    }

    // コップの温度と空間内の水分量を常に更新
    cupTempValue.textContent = cupTemp; // コップの温度
    moistureValue.textContent = moisture.toFixed(1); // 空間内の水分量
}


function updateMoisture() {
    // 空間内の水分量の表示を更新
    moistureDisplay.textContent = moisture.toFixed(1);

    // ボタンの有効/無効化
    humidifyButton.disabled = moisture >= 40; // 40g/m³以上で加湿ボタンを無効化
    document.getElementById('dehumidifyButton').disabled = moisture <= 5; // 5g/m³以下で除湿ボタンを無効化

    // グラフを更新
    plotPointAndBar(graphContext, cupTemp, moisture); // 棒グラフを更新
    updateCondensation(); // 結露の状態を更新
    updateDescription(); // 説明テキストを更新
}



    function startCoolingExperiment() {
    const coolingInterval = setInterval(() => {
        // 実験が停止された場合に処理を終了
        if (!isExperimentRunning) {
            clearInterval(coolingInterval);
            targetTemp = null; // 実験停止時に目標温度をリセット
            return;
        }

        if (roomTemp > cupTemp) {
            roomTemp = parseFloat((roomTemp - 0.1).toFixed(1)); // 温度を0.1℃ずつ下げる
        } else if (roomTemp < cupTemp) {
            roomTemp = parseFloat((roomTemp + 0.1).toFixed(1)); // 温度を0.1℃ずつ上げる
        } else {
            clearInterval(coolingInterval); // 目標温度に達したら停止
        }

	updateCondensation();
        updateCupTemp(); // コップの温度を更新
        plotPointAndBar(graphContext, roomTemp, moisture); // グラフを更新
        updateCupImage(); // 画像を更新
    }, 500); // 500msごとに温度を更新
}

      
    function drawAxis(ctx) {
    // X軸とY軸
    ctx.strokeStyle = 'black';
    ctx.lineWidth = 2;
    ctx.beginPath();
    ctx.moveTo(originX, 0);
    ctx.lineTo(originX, originY); // Y軸
    ctx.lineTo(graphCanvas.width, originY); // X軸
    ctx.stroke();

    // X軸ラベル「コップの温度」
    ctx.font = '16px Arial';
    ctx.fillStyle = 'black';
    ctx.textAlign = 'center';
    ctx.fillText("部屋の温度 (°C)", graphCanvas.width / 2 + 40, originY + 40);

    // Y軸ラベル「飽和水蒸気量」
    ctx.save(); // 現在の状態を保存
    ctx.translate(50, graphCanvas.height / 2); // ラベル位置を移動
    ctx.rotate(-Math.PI / 2); // テキストを縦書きに回転
    ctx.textAlign = 'center';
    ctx.fillText("飽和水蒸気量 (g/m³)", 0, 0);
    ctx.restore(); // 状態を元に戻す
}



    function drawScaleX(ctx) {
        ctx.font = '12px Arial';
        ctx.fillStyle = 'black';
        for (let i = 0; i <= 35; i += 5) {
            const x = originX + i * unitX;
            ctx.beginPath();
            ctx.moveTo(x, originY);
            ctx.lineTo(x, originY + 10);
            ctx.stroke();
            ctx.fillText(`${i}°C`, x - 10, originY + 20);
        }
    }

    function drawScaleY(ctx) {
        ctx.font = '12px Arial';
        ctx.fillStyle = 'black';
        for (let j = 0; j <= 40; j += 10) {
            const y = originY - j * unitY;
            ctx.beginPath();
            ctx.moveTo(originX, y);
            ctx.lineTo(originX - 10, y);
            ctx.stroke();
            ctx.fillText(`${j}g/m³`, originX - 35, y + 5);
        }
    }

    function e(T) {
        return 6.1078 * Math.pow(10, (7.5 * T / (T + 237.3)));
    }

    function a(T) {
        return parseFloat((217 * e(T) / (T + 273.15)).toFixed(1));
    }

    function draw(ctx, a) {
        ctx.strokeStyle = 'black';
        ctx.lineWidth = 2;
        ctx.beginPath();
        for (let t = 0; t <= 35; t++) {
            const x = originX + t * unitX;
            const y = originY - a(t) * unitY;
            if (t === 0) {
                ctx.moveTo(x, y);
            } else {
                ctx.lineTo(x, y);
            }
        }
        ctx.stroke();
    }

    function plotPointAndBar(ctx, T, vapor) {
        // キャンバスをクリア
        ctx.clearRect(0, 0, graphCanvas.width, graphCanvas.height);

        // 軸やスケールを再描画
        drawAxis(ctx);
        drawScaleX(ctx);
        drawScaleY(ctx);
        draw(ctx, a); // 飽和水蒸気量曲線の描画

        // 棒グラフの幅
        const barWidth = 8;

        if (T !== null && vapor !== null) {
            const vaporAtT = a(T); // Tでの飽和水蒸気量
            const x = originX + T * unitX; // Tのx座標

            // 飽和水蒸気量（濃い青の棒）
            ctx.fillStyle = 'blue';
            ctx.fillRect(x - barWidth / 2, originY, barWidth, vapor * -unitY);

            // 差分の描画（緑またはオレンジ）
            if (vapor > vaporAtT) {
                ctx.fillStyle = 'green'; // 過飽和部分
                ctx.fillRect(x - barWidth / 2, originY - vaporAtT * unitY, barWidth, -(vapor - vaporAtT) * unitY);
            } else {
                ctx.fillStyle = 'orange'; // 飽和未満部分
                ctx.fillRect(x - barWidth / 2, originY - vapor * unitY, barWidth, (vaporAtT - vapor) * -unitY);
            }
        }
    }


    // 初期表示
    plotPointAndBar(graphContext, 20, 5);

        // 初期表示
        updateMoisture();
      updateCupTemp();
      updateCupImage();
      updateRoomTemp();
  updateCondensation();

  </script>

</body></html>
